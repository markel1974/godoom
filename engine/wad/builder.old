package wad

import (
	"errors"
	"fmt"
	"github.com/markel1974/godoom/engine/model"
	"github.com/markel1974/godoom/engine/wad/lumps"
	"math"
	"os"
	"sort"
	"strconv"
)

//http://www.gamers.org/dhs/helpdocs/dmsp1666.html
//http://doomwiki.org/
//https://github.com/penberg/godoom
const scaleFactor = 10.0








type Point struct {
	X int16
	Y int16
}

type XY struct {
	X float64
	Y float64
}

type Point3 struct {
	X float64
	Y float64
	Z float64
	U float64
	V float64
}

func MakePoint3F(x, y, z, u, v float64) Point3{
	return Point3{ X:x, Y:y, Z:z, U:u, V: v }
}

func MakePoint3(x, y, z, u, v int16) Point3{
	return MakePoint3F(float64(x), float64(y), float64(z), float64(u), float64(v))
}

type VertexData struct {
	Start       *lumps.Vertex
	End         *lumps.Vertex
	Line        *lumps.LineDef
	Side        *lumps.SideDef
}

type Data struct {
	SectorId    int16
	SubSectorId int16
	Sector      *lumps.Sector
	SubSector   *lumps.SubSector
	Vertices    []*VertexData
	Ceil        float64
	Floor       float64
}


type Builder struct {
	w        *WAD
}

func NewBuilder() * Builder {
	return &Builder{
	}
}

func (b * Builder) Setup(wadFile string, levelNumber int) (*model.Input, error) {
	b.w = New()
	if err := b.w.Load(wadFile); err != nil {
		return nil, err
	}
	levelNames := b.w.GetLevels()
	if len(levelNames) == 0 {
		return nil,errors.New("error: No levels found")
	}
	levelIdx := levelNumber - 1
	if levelIdx >= len(levelNames) {
		return nil, errors.New(fmt.Sprintf("error: No such level number %d", levelNumber))
	}
	levelName := levelNames[levelIdx]
	fmt.Printf("Loading level %s ...\n", levelName)
	level, err := b.w.GetLevel(levelName)
	if err != nil {
		fmt.Printf("error: %s\n", err)
		os.Exit(1)
	}
	data := b.scanSubSectors(level)

	/*


	 */

	textures := make(map[string] bool)
	var sectors []*model.InputSector

	for _, d := range data {
		sector := &model.InputSector{
			Id:            strconv.Itoa(int(d.SubSectorId)),
			Floor:         d.Floor,
			Ceil:          d.Ceil,
			Textures:      true,
			WallTexture:  "wall2.ppm",
			LowerTexture: "wall.ppm",
			UpperTexture: "wall3.ppm",
			FloorTexture: "floor.ppm",
			CeilTexture:  "ceil.ppm",
		}
		sectors = append(sectors, sector)
		for _, v := range d.Vertices {
			if v.Side.LowerTexture != "-" { textures[v.Side.LowerTexture] = true }
			if v.Side.MiddleTexture != "-" { textures[v.Side.MiddleTexture] = true }
			if v.Side.UpperTexture != "-" { textures[v.Side.UpperTexture] = true }

			var curr * model.InputNeighbor = nil

			/*
				if len(sector.Neighbors) > 0 {
					prev := sector.Neighbors[len(sector.Neighbors)-1]
					if prev.X == float64(v.Start.XCoord) && prev.Y == float64(v.Start.YCoord) {
						curr = prev
					} else {
						//TODO WALL OR NEIGHBOR????
						//prev.Neighbor = "wall"

						id, ld := b.bruteForceLineDef(level, v.Start.XCoord, v.Start.YCoord, int16(prev.X), int16(prev.Y))
						if ld != nil {
							wall := false
							if !v.Line.HasFlag(lumps.TwoSided) {
								wall = v.Side.MiddleTexture != "-"
							}
							if wall {
								prev.Neighbor = "wall"
							} else {
								prev.Neighbor = strconv.Itoa(int(id))
							}
						} else {
							//prev.Neighbor = b.getOppositeSubSectorByLine(level, d.SubSectorId, int16(prev.X), int16(prev.Y), v.Start.XCoord, v.Start.YCoord)
						}
						//TODO TEXTURE!!!!!
					}
				}
				if curr == nil {
					curr = &model.InputNeighbor{ XY: model.XY{ X:float64(v.Start.XCoord), Y: float64(v.Start.YCoord) } }
					sector.Neighbors = append(sector.Neighbors, curr)
				}

			*/
			if len(sector.Neighbors) > 0 {
				prev := sector.Neighbors[len(sector.Neighbors)-1]
				if prev.X != float64(v.Start.XCoord) || prev.Y != float64(v.Start.YCoord) {
					//WE HAVE TO CLOSE PREVIOUS!!!
					id, ld := b.bruteForceLineDef(level, v.Start.XCoord, v.Start.YCoord, int16(prev.X), int16(prev.Y))
					if ld != nil {
						wall := false
						if !v.Line.HasFlag(lumps.TwoSided) {
							wall = v.Side.MiddleTexture != "-"
						}
						if wall {
							prev.Neighbor = "wall"
						} else {
							prev.Neighbor = strconv.Itoa(int(id))
						}
					} else {
						prev.Neighbor = b.getOppositeSubSectorByLine(level, d.SubSectorId, int16(prev.X), int16(prev.Y), v.Start.XCoord, v.Start.YCoord)
					}
				}
			}
			curr = &model.InputNeighbor{ XY: model.XY{ X:float64(v.Start.XCoord), Y: float64(v.Start.YCoord) } }
			sector.Neighbors = append(sector.Neighbors, curr)

			wall := false
			if !v.Line.HasFlag(lumps.TwoSided) {
				wall = v.Side.MiddleTexture != "-"
			}
			if wall {
				curr.Neighbor = "wall"
			} else {
				id, ld := b.bruteForceLineDef(level, v.End.XCoord, v.End.YCoord, v.Start.XCoord, v.Start.YCoord)
				if ld != nil {
					curr.Neighbor = strconv.Itoa(int(id))
				} else {
					curr.Neighbor = b.getOppositeSubSectorByLine(level, d.SubSectorId, v.Start.XCoord, v.Start.YCoord, v.End.XCoord, v.End.YCoord)
				}
			}
			curr.Tag = ""
			curr.Upper = v.Side.UpperTexture
			curr.Middle = v.Side.MiddleTexture
			curr.Lower = v.Side.LowerTexture

			next := &model.InputNeighbor{
				XY:       model.XY{ X:float64(v.End.XCoord), Y: float64(v.End.YCoord) },
				//Neighbor: curr.Neighbor,
				Tag:      "",
				Upper:    v.Side.UpperTexture,
				Middle:   v.Side.MiddleTexture,
				Lower:    v.Side.LowerTexture,
			}
			sector.Neighbors = append(sector.Neighbors, next)
		}
	}

	for _, c := range sectors {
		for idx := 0; idx < len(c.Neighbors); idx++ {
			curr := c.Neighbors[idx]
			curr.X = math.Abs(curr.X)
			curr.Y = math.Abs(curr.Y)
		}
	}

	sort.SliceStable(sectors, func(i, j int) bool {
		a, _ := strconv.Atoi(sectors[i].Id)
		b, _ := strconv.Atoi(sectors[j].Id)
		return a < b
	})

	for textureId := range textures {
		if texture, err := b.w.GetTextureImage(textureId); err != nil {
			fmt.Println(textureId, err.Error())
		} else {
			fmt.Println(textureId, texture.Rect)
		}
	}

	p1 := level.Things[1]
	position := model.XY{
		X : float64(p1.XPosition),
		Y : float64(p1.YPosition),
	}

	playerSectorId, playerSSectorId, playerSector := level.FindSector(p1.XPosition, p1.YPosition)
	//TEST
	//playerSSectorId = 44
	//position.X = 1520 + 5
	//position.Y = -3168 + 5
	position.X = math.Abs(position.X)
	position.Y = math.Abs(position.Y)

	//out, _ := json.Marshal(b.cfg[int16(playerSSectorId)])
	//out, _ := json.Marshal(b.cfg[1])
	//fmt.Println(string(out))

	fmt.Println(playerSector, playerSectorId, playerSSectorId)

	cfg := &model.Input{ScaleFactor: scaleFactor, Sectors: sectors, Player: &model.InputPlayer{ Position: position, Angle: float64(p1.Angle), Sector: strconv.Itoa(int(playerSSectorId)) }}

	return cfg, nil
}

func (b * Builder) scanSubSectors(level *Level) map[int16]*Data{
	data := make(map[int16]*Data)

	for subSectorId := int16(0); subSectorId < int16(len(level.SubSectors)); subSectorId ++ {
		subSector := level.SubSectors[subSectorId]

		endSegmentId := subSector.StartSeg + subSector.NumSegments
		for segmentId := subSector.StartSeg; segmentId < endSegmentId; segmentId++ {
			segment := level.Segments[segmentId]
			lineDef := level.LineDefs[int(segment.LineNum)]
			_, sideDef := level.SegmentSideDef(segment, lineDef)
			if sideDef == nil { continue }
			sectorId := sideDef.SectorRef
			sector := level.Sectors[sectorId]

			current, ok := data[subSectorId]
			if !ok {
				current = &Data{
					SectorId:    sectorId,
					Sector:      sector,
					SubSectorId: subSectorId,
					SubSector:   subSector,
					Ceil:        float64(sector.CeilingHeight) / 5,
					Floor:       float64(sector.FloorHeight) / 5,
				}
				data[subSectorId] = current
			}
			current.Vertices = append(current.Vertices, &VertexData{
				Start: level.Vertexes[segment.VertexStart],
				End:   level.Vertexes[segment.VertexEnd],
				Line:  lineDef,
				Side:  sideDef,
			})
		}
	}
	return data

}


func (b * Builder) getOppositeSubSectorByLine(level * Level, subSectorId int16, x1 int16, y1 int16, x2 int16, y2 int16) string {
	alpha, beta := level.FindSubSectorByLine(int(x1), int(y1), int(x2), int(y2))
	out := int16(-1)
	if alpha == subSectorId {
		out = beta
	} else if beta == subSectorId {
		out = alpha
	} else {
		//TODO PATCH ASPETTANDO FindSubSectorByLine
		out = alpha
	}
	switch out {
	case -1: return "unknown"
	default: return strconv.Itoa(int(out))
	}
}


func (b * Builder) bruteForceLineDef(level * Level, startX int16, startY int16, endX int16, endY int16) (int16, *lumps.SideDef) {
	for subSectorId := int16(0); subSectorId < int16(len(level.SubSectors)); subSectorId++ {
		subSector := level.SubSectors[subSectorId]

		endSegmentId := subSector.StartSeg + subSector.NumSegments
		for segmentId := subSector.StartSeg; segmentId < endSegmentId; segmentId++ {
			segment := level.Segments[segmentId]
			lineDef := level.LineDefs[int(segment.LineNum)]
			_, sideDef := level.SegmentSideDef(segment, lineDef)
			if sideDef == nil {
				continue
			}

			start := level.Vertexes[segment.VertexStart]
			end := level.Vertexes[segment.VertexEnd]

			if start.XCoord == startX && start.YCoord == startY && end.XCoord == endX && end.YCoord == endY {
				return segmentId, sideDef
			}
		}
	}
	return -1, nil
}

