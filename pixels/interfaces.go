package pixels

import "image/color"

// ITarget is something that can be drawn onto, such as a window, a canvas, and so on.
//
// You can notice, that there are no "drawing" methods in a ITarget. That's because all drawing
// happens indirectly through ITriangles and IPicture instances generated via MakeTriangles and
// MakePicture method.
type ITarget interface {
	// MakeTriangles generates a specialized copy of the provided ITriangles.
	//
	// When calling Draw method on the returned ITargetTriangles, the ITargetTriangles will be
	// drawn onto the ITarget that generated them.
	//
	// Note, that not every ITarget has to recognize all possible types of ITriangles. Some may
	// only recognize ITrianglesPosition and ITrianglesColor and ignore all other properties (if
	// present) when making new ITargetTriangles. This varies from ITarget to ITarget.
	MakeTriangles(ITriangles) ITargetTriangles

	// MakePicture generates a specialized copy of the provided IPicture.
	//
	// When calling Draw method on the returned ITargetPicture, the ITargetPicture will be drawn
	// onto the ITarget that generated it together with the ITargetTriangles supplied to the Draw
	// method.
	MakePicture(IPicture) ITargetPicture
}

// IBasicTarget is a ITarget with additional basic adjustment methods.
type IBasicTarget interface {
	ITarget

	// SetMatrix sets a Matrix that every point will be projected by.
	SetMatrix(Matrix)

	// SetColorMask sets a color that will be multiplied with the ITrianglesColor property of all
	// ITriangles.
	SetColorMask(color.Color)
}

// ITriangles represents a list of vertices, where each three vertices form a triangle. (First,
// second and third is the first triangle, fourth, fifth and sixth is the second triangle, etc.)
type ITriangles interface {
	// Len returns the number of vertices. The number of triangles is the number of vertices
	// divided by 3.
	Len() int

	// SetLen resizes ITriangles to len vertices. If ITriangles B were obtained by calling Slice
	// method on ITriangles A, the relationship between A and B is undefined after calling SetLen
	// on either one of them.
	SetLen(len int)

	// Slice returns a sub-ITriangles of this ITriangles, covering vertices in range [i, j).
	//
	// If ITriangles B were obtained by calling Slice(4, 9) on ITriangles A, then A and B must
	// share the same underlying data. Modifying B must change the contents of A in range
	// [4, 9). The vertex with index 0 at B is the vertex with index 4 in A, and so on.
	//
	// Returned ITriangles must have the same underlying type.
	Slice(i, j int) ITriangles

	// Update copies vertex properties from the supplied ITriangles into this ITriangles.
	//
	// Properties not supported by these ITriangles should be ignored. Properties not supported by
	// the supplied ITriangles should be left untouched.
	//
	// The two ITriangles must have the same Len.
	Update(ITriangles)

	// Copy creates an exact independent copy of this ITriangles (with the same underlying type).
	Copy() ITriangles
}

// ITargetTriangles are ITriangles generated by a ITarget with MakeTriangles method. They can be drawn
// onto that (no other) ITarget.
type ITargetTriangles interface {
	ITriangles

	// Draw draws ITriangles onto an associated ITarget.
	Draw()
}

// ITrianglesPosition specifies ITriangles with Position property.
type ITrianglesPosition interface {
	ITriangles
	Position(i int) Vec
}

// ITrianglesColor specifies ITriangles with Color property.
type ITrianglesColor interface {
	ITriangles
	Color(i int) RGBA
}

// ITrianglesPicture specifies ITriangles with IPicture property.
//
// The first value returned from IPicture method is IPicture coordinates. The second one specifies the
// weight of the IPicture. Value of 0 means, that IPicture should be completely ignored, 1 means that
// is should be fully included and anything in between means anything in between.
type ITrianglesPicture interface {
	ITriangles
	Picture(i int) (pic Vec, intensity float64)
}

// ITrianglesClipped specifies ITriangles with Clipping Rectangle property.
//
// The first value returned from ClipRect method is the clipping rectangle. The second one specifies
// if the triangle is clipped.
type ITrianglesClipped interface {
	ITriangles
	ClipRect(i int) (rect Rect, is bool)
}

// IPicture represents a rectangular area of raster data, such as a color. It has Bounds which
// specify the rectangle where data is located.
type IPicture interface {
	// Bounds returns the rectangle of the IPicture. All data is located with this rectangle.
	// Querying properties outside the rectangle should return default value of that property.
	Bounds() Rect
}

// ITargetPicture is a IPicture generated by a ITarget using MakePicture method. This IPicture can be drawn onto
// that (no other) ITarget together with a ITargetTriangles generated by the same ITarget.
//
// The ITargetTriangles specify where, shape and how the IPicture should be drawn.
type ITargetPicture interface {
	IPicture

	// Draw draws the supplied ITargetTriangles (which must be generated by the same ITarget as
	// this ITargetPicture) with this ITargetPicture. The ITargetTriangles should utilize the data
	// from this ITargetPicture in some way.
	Draw(ITargetTriangles)

	Update(p IPicture)
}

// IPictureColor specifies IPicture with Color property, so that every position inside the IPicture's
// Bounds has a color.
//
// Positions outside the IPicture's Bounds must return full transparent (Alpha(0)).
type IPictureColor interface {
	IPicture
	Color(at Vec) RGBA
}
